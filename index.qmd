---
df-print: kable
---

## Getting to Know the Data

The Metabric study characterized the genomic mutations and gene
expression profiles for 2509 primary breast tumours. In addition to the
gene expression data generated using microarrays, genome-wide copy
number profiles were obtained using SNP microarrays. Targeted sequencing
was performed for 2509 primary breast tumours, along with 548 matched
normals, using a panel of 173 of the most frequently mutated breast
cancer genes as part of the Metabric study.

**Refrences:**

-   [Curtis *et al.*, Nature 486:346-52,
    2012](https://pubmed.ncbi.nlm.nih.gov/22522925)
-   [Pereira *et al.*, Nature Communications 7:11479,
    2016](https://www.ncbi.nlm.nih.gov/pubmed/27161491)

Both the clinical data and the gene expression values were downloaded
from
[cBioPortal](https://www.cbioportal.org/study/summary?id=brca_metabric).

We excluded observations for patient tumor samples lacking expression
data, resulting in a data set with fewer rows.

## Download the Data

Follow [this
link](https://cbioportal-datahub.s3.amazonaws.com/brca_metabric.tar.gz)
to download the metabric dataset and copy the downloaded folder into the
data folder in your working directory (i.e., IntroR folder).

![](images/cbiocportal.png){fig-align="center" width="202"}

## Overview of the Data

The following table illustartes the column names and descriptions of the
metabric data frame we will be using in this case study.

```{=html}
<table class="no-spacing" cellspacing="0" >
  <caption>Description of column names in the metabric dataset</caption>
  <thead>
    <tr>
      <th>Column Name</th>
      <th style="padding-left: 120px; " >Description</th>
    </tr>
  </thead>
  <tbody>
    <tr><td>Patient_Id</td>	<td>#Identifier to uniquely specify a patient.</td></tr>
<tr><td>Lymph_Nodes_Examined_Positive</td>	<td>Number of lymphnodes positive</td></tr>
<tr><td>Npi</td>	<td>Nottingham prognostic index</td></tr>
<tr><td>Cellularity</td>	<td>Tumor Content</td></tr>
<tr><td>Chemotherapy</td>	<td>Chemotherapy.</td></tr>
<tr><td>Cohort</td>	<td>Cohort</td></tr>
<tr><td>Er_Ihc</td>	<td>ER status measured by IHC</td></tr>
<tr><td>Her2_Snp6</td>	<td>HER2 status measured by SNP6</td></tr>
<tr><td>Intclust</td>	<td>Integrative Cluster</td></tr>
<tr><td>Age_At_Diagnosis</td>	<td>Age at Diagnosis</td></tr>
<tr><td>Os_Months</td>	<td>Overall survival in months since initial diagonosis.</td></tr>
<tr><td>Os_Status</td>	<td>Overall patient survival status.</td></tr>
<tr><td>Threegene</td>	<td>3-Gene classifier subtype</td></tr>
<tr><td>Vital_Status</td>	<td>The survival state of the person.</td></tr>
<tr><td>Radio_Therapy</td>	<td>Radio Therapy</td></tr>
<tr><td>Cancer_Type</td>	<td>Cancer Type</td></tr>
<tr><td>Cancer_Type_Detailed</td>	<td>Cancer Type Detailed</td></tr>
<tr><td>Er_Status</td>	<td>ER Status</td></tr>
<tr><td>Her2_Status</td>	<td>HER2 Status</td></tr>
<tr><td>Grade</td>	<td>Numeric value to express the degree of abnormality of cancer cells, a measure of differentiation and aggressiveness.</td></tr>
<tr><td>Oncotree_Code</td>	<td>Oncotree Code</td></tr>
<tr><td>Pr_Status</td>	<td>PR Status</td></tr>
<tr><td>Sample_Type</td>	<td>The type of sample (i.e., normal, primary, met, recurrence).</td></tr>
<tr><td>Tumor_Size</td>	<td>Tumor size.</td></tr>
<tr><td>Tumor_Stage</td>	<td>Tumor stage.</td></tr>
<tr><td>Tmb_Nonsynonymous</td>	<td>TMB (nonsynonymous)</td></tr>
<tr><td>FOXA1</td>	<td>FOXA1 Expression data</td></tr>
<tr><td>MLPH</td>	<td>MLPH Expression data</td></tr>
<tr><td>ESR1</td>	<td>ESR1 Expression data</td></tr>
<tr><td>ERBB2</td>	<td>ERBB2 Expression data</td></tr>
<tr><td>TP53</td>	<td>TP53 Expression data</td></tr>
<tr><td>PIK3CA</td>	<td>PIK3CA Expression data</td></tr>
<tr><td>GATA3</td>	<td>GATA3 Expression data</td></tr>
<tr><td>PGR</td>	<td>PGR Expression data</td></tr>
  </tbody>
</table>
```

## Pre-Processing the Data

### Task 1: Patient and sample data

**1. Import the clinical patient data file into a data frame named
patient_info. If the import is successful, the expected output for the
`patient_info` command would be as follows.**

```{r}
#| echo: false
library(reticulate)
```

```{python}
#| echo: false
#| message: false
#| classes: scrolling
import pandas as pd
patient_info = pd.read_csv(
  "data/brca_metabric/data_clinical_patient.txt", sep='\t', skiprows=4)
df1 = patient_info.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
import pandas as pd
patient_info = pd.read_csv(
  "data/brca_metabric/data_clinical_patient.txt", sep='\t', skiprows=4)
patient_info
```

</details>


**2. Filter the `patient_info` dataframe to exclude data from a different study where patient ID starts with "MTS", keeping only the data where patient ID has the form "MB-xxxx". **

*The expected output for dimensions of the data frame:*

```{python}
#| echo: false
#| message: false
#| classes: scrolling
patient_info_mask = patient_info.PATIENT_ID.str.contains('^MB-')
patient_info = patient_info[patient_info_mask]
df1 = patient_info.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
patient_info_mask = patient_info.PATIENT_ID.str.contains('^MB-')
patient_info = patient_info[patient_info_mask]
patient_info
```

</details>

**3. Remove all columns with indices 8, 9, 10, 18, 20, 21, 22, and 23 from the dataset, then organize the remaining data in ascending order based on patient IDs.**

*The expected column names of the data frame:*

```{python}
#| echo: false
#| message: false
#| classes: scrolling
cols = [8,9,10,18,20,21,22,23]
patient_info.drop(patient_info.columns[cols],axis=1,inplace=True)
df1 = patient_info.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
cols = [8,9,10,18,20,21,22,23]
patient_info.drop(patient_info.columns[cols],axis=1,inplace=True)
patient_info
```

</details>


**4. Import the clinical sample data file into a data frame named sample_info, keeping only the data where patient ID has the form "MB-xxxx". ** 

*The expected output for the `sample_info` command:*

```{python}
#| echo: false
#| message: false
#| classes: scrolling
sample_info = pd.read_csv(
  "data/brca_metabric/data_clinical_sample.txt", sep='\t', skiprows=4)
sample_info_mask = sample_info.PATIENT_ID.str.contains('^MB-')
sample_info = sample_info[sample_info_mask]
df1 = sample_info.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
sample_info = pd.read_csv(
  "data/brca_metabric/data_clinical_sample.txt", sep='\t', skiprows=4)
sample_info_mask = sample_info.PATIENT_ID.str.contains('^MB-')
sample_info = sample_info[sample_info_mask]
df1 = sample_info.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

</details>

**6. Join the two data frames to create a data frame named patient_sample_data and remove columns that contain identical  values. **

*The expected output:*

```{python}
#| echo: false
#| message: false
#| classes: scrolling
patient_sample_data = pd.merge(patient_info, sample_info, how="left", on="PATIENT_ID")
df1 = patient_sample_data.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
patient_sample_data = pd.merge(patient_info, sample_info, how="left", on="PATIENT_ID")
patient_sample_data
```

</details>

### Task 2: Expression data

**1. Read the microarray data into data frame named mrna. Keep only the expression data for the specified genes: "ESR1", "ERBB2", "PGR", "TP53", "PIK3CA", "GATA3", "FOXA1", "MLPH". Remove the Entrez ID column.**

```{python}
#| echo: false
#| message: false
#| classes: scrolling
mrna = pd.read_csv("data/brca_metabric/data_mrna_illumina_microarray.txt", sep='\t')
mrna = mrna[mrna["Hugo_Symbol"].isin(["ESR1", "ERBB2", "PGR", "TP53", "PIK3CA", "GATA3", "FOXA1", "MLPH"])]
mrna = mrna.drop('Entrez_Gene_Id', axis=1)
df1 = mrna.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
mrna = pd.read_csv("data/brca_metabric/data_mrna_illumina_microarray.txt", sep='\t')
mrna = mrna[mrna["Hugo_Symbol"].isin(["ESR1", "ERBB2", "PGR", "TP53", "PIK3CA", "GATA3", "FOXA1", "MLPH"])]
mrna = mrna.drop('Entrez_Gene_Id', axis=1)
mrna
```

</details>

**2. To facilitate the join of patient_sample_data and the above data frame in the next task, transform the above data frame to the following format. **

*The resulting data frame:*

```{python}
#| echo: false
#| message: false
#| classes: scrolling
mrna = mrna.T
mrna = mrna.reset_index()
mrna.columns = mrna.iloc[0]
mrna = mrna[1:]
mrna = mrna.rename(columns = {'Hugo_Symbol':'PATIENT_ID'})
df1 = mrna.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
mrna = mrna.T
mrna = mrna.reset_index()
mrna.columns = mrna.iloc[0]
mrna = mrna[1:]
mrna = mrna.rename(columns = {'Hugo_Symbol':'PATIENT_ID'})
mrna
```

</details>

**3. Join the above data frame and the data frame patient_sample_data created in Task 2 to create  clinical_and_expression_data dataframe. **

*The final data frame:*

```{python}
#| echo: false
#| message: false
#| classes: scrolling
clinical_and_expression_data = pd.merge(patient_sample_data, mrna, how="left", on=["PATIENT_ID"])
df1 = clinical_and_expression_data.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
clinical_and_expression_data = pd.merge(patient_sample_data, mrna, how="left", on=["PATIENT_ID"])
clinical_and_expression_data
```

</details>

**5. Notice that one of the columns contains key value pairs in the form key:value. For example: 0:LIVING, 1:DECEASED. Update column to retain only the values. **

```{python}
#| echo: false
#| message: false
#| classes: scrolling
clinical_and_expression_data[['temp', 'OS_STATUS']] = clinical_and_expression_data['OS_STATUS'].str.split(':', expand = True)
clinical_and_expression_data = clinical_and_expression_data.drop('temp', axis=1)
df1 = clinical_and_expression_data.head()
```

```{r}
#| classes: scrolling
#| echo: false
py$df1
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
clinical_and_expression_data[['temp', 'OS_STATUS']] = clinical_and_expression_data['OS_STATUS'].str.split(':', expand = True)
clinical_and_expression_data = clinical_and_expression_data.drop('temp', axis=1)
clinical_and_expression_data
```

</details>

**6. Rename the data frame to metabric and write it to a metabric_dataset.csv file for all subsequent analysis. **

```{python}
#| echo: false
#| message: false
#| classes: scrolling
metabric = clinical_and_expression_data
metabric.to_csv("data/brca_metabric/metabric_dataset.csv")
```

```{r}
#| classes: scrolling
#| echo: false
metabrics <- py$metabric
head(metabrics)
```

```{=html}
<details>
<summary>Answer</summary>
```
```{python}
#| output: false
#| eval: false
#| classes: scrolling
metabric = clinical_and_expression_data
```

</details>

## Visualizing the Data


### Task 1: Expression of estrogen receptor across integrative clusters

```{r}
#| message: false
# read in the METABRIC data, convert the INTCLUST variable into a
# categorical variable with the levels in the correct order, and select just
# the columns and rows we're going to use
library(tidyverse)
metabric <- read_csv("data/brca_metabric/metabric_dataset.csv")
metabric <- metabric |> 
  mutate(INTCLUST = 
           factor(INTCLUST, 
                  levels = c("1", "2", "3", "4ER-", "4ER+", "5", "6", "7", "8", "9", "10"))) |> 
  mutate(THREEGENE = 
           replace_na(THREEGENE, "Unclassified")) |> 
  select(PATIENT_ID, ER_IHC, PR_STATUS, THREEGENE, INTCLUST, ESR1) |> 
  filter(!is.na(INTCLUST), !is.na(ESR1))
```


```{r}
# plot the ESR1 expression for each integrative cluster
plot <- metabric |> ggplot() +
  geom_boxplot(aes(x = INTCLUST, y = ESR1, fill = INTCLUST)) +
  labs(x = "Integrative cluster", y = "ESR1 expression")
plot
```

```{r}
plot +
  theme_bw() +
  theme(
    panel.grid.major.x = element_blank(),
    axis.ticks.x = element_blank(),
    legend.position = "none"
  )
```


### Task 2: Expression of estrogen receptor across 3-gene classification

```{r}
metabric |> 
  ggplot( aes(x = THREEGENE, y = ESR1, colour = PR_STATUS)) +
  geom_boxplot() +
  geom_point(position = position_jitterdodge(), size = 0.5, alpha = 0.3) +
  labs(x = "3-gene classification", y = "ESR1 expression", colour = "PR status") +
  scale_color_brewer(palette = "Set1") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
    axis.ticks.x = element_blank()
  )
```

